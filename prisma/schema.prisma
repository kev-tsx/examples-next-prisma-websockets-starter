// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}

model Msj {
  id        String   @id @default(cuid())
  text      String
  user      String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

enum PosterSource {
  RAW
  GITHUB
}

model Post {
  id     String       @id @default(uuid())
  name   String
  text   String
  source PosterSource @default(RAW)

  // To return `Date`s intact through the API we need to add data transformers
  // https://trpc.io/docs/data-transformers
  createdAt DateTime @unique @default(now())
  updatedAt DateTime @unique @default(now())
}

model Pokemon {
  id           Int    @id
  name         String @unique
  url          String
  votesFor     Vote[] @relation("pokemon_voted_for")
  votesAgainst Vote[] @relation("pokemon_voted_against")
}

model Vote {
  id                  String   @id @default(cuid())
  createdAt           DateTime @default(now())
  pokemonVotedFor     Pokemon  @relation(name: "pokemon_voted_for", fields: [votedFor], references: [id], onDelete: Cascade)
  pokemonVotedAgainst Pokemon  @relation(name: "pokemon_voted_against", fields: [votedAgainst], references: [id], onDelete: Cascade)
  votedFor            Int
  votedAgainst        Int
  count               Int      @default(1)

  @@index([votedFor, votedAgainst])
  @@map("votes")
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  password      String?
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
